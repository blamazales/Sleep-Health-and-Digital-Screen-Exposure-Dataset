# -*- coding: utf-8 -*-
"""Sleep Health and Digital Screen Exposure Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UXH-dLvwmchEuFkCx8KIiCaMMcFXEF1A

# Sleep Health and Digital Screen Exposure Dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**Contexto**

Entender a relação entre qualidade do sono, níveis de estresse e exposição à tela digital é crucial para analisar os impactos do estilo de vida moderno na saúde. Este conjunto de dados fornece insights detalhados sobre vários fatores que afetam o sono e a saúde ocular, incluindo duração do sono, estresse, atividade física, histórico médico e uso de dispositivos digitais antes de dormir.

**Descrição das colunas:**

*   Gender: Gênero do indivíduo (M/F)
*   Age: Idade do indivíduo (em anos)
*   Duração do sono: Duração média do sono (em horas)
*   Sleep Quality: Qualidade do sono autorrelatada (Escala: 1 - Pobre a 5 - Excelente)
*   Stress Level: Nível de estresse (Escala: 1 - Baixo a 5 - Alto)
*   Blood Pressure: Pressão arterial registrada (sistólica/diastólica em mmHg)
*   Heart Rate: frequência cardíaca em repouso (em bpm)
*   Daily Steps: média de passos diários dados
*   Physical Activity: nível de atividade física (medida quantificada)
*   Height: altura do indivíduo (em cm)
*   Smoking: se o indivíduo é fumante (S/N)
*   Medical Issue: quaisquer condições médicas existentes (S/N)
*   Ongoing Medication: se o indivíduo está tomando medicação (S/N)
*   Smart Device Before Bed: uso de dispositivos digitais antes de dormir (S/N)
*   Average Screen Time: Tempo médio diário de tela (em horas)
*   Blue-Light Filter: Se o indivíduo usa um filtro de luz azul (S/N)
*  Discomfort/Eye-Strain: Experiência de desconforto ou cansaço ocular (S/N)
*   Redness in Eye: Experiência de vermelhidão ocular (S/N)
*   Itchiness/Irritation in Eye: Experiência de coceira ou irritação ocular (S/N)
*   Dry Eye Disease: Diagnóstico ou sintomas da doença do olho seco (S/N)
"""

df = pd.read_csv('/content/Dry_Eye_Dataset.csv')
df.head()

df.columns

df.columns = ['Gênero', 'Idade', 'Duração do Sono', 'Qualidade do Sono', 'Nível de Estresse',
             'Pressão Sanguínea', 'Frequência Cardíaca', 'Passos Diários', 'Atividade Fisica',
              'Altura', 'Peso', 'Disturbio do Sono', 'Acordar durante a noite', 'Sentir sono durante o dia',
              'Consumo de cafeína', 'Consumo de álcool', 'Fumante', 'Problema médico', 'Medicação em andamento',
              'Dispositivo inteligente antes de dormir', 'Tempo médio de tela', 'Filtro de luz azul',
              'Cansaço Visual', 'Vermelhidão nos olhos', 'Irritação nos olhos', 'Doença do olho seco']

df.head()

colunas_a_alterar = ['Disturbio do Sono', 'Acordar durante a noite', 'Sentir sono durante o dia', 'Consumo de cafeína', 'Consumo de álcool', 'Fumante', 'Problema médico', 'Medicação em andamento', 'Dispositivo inteligente antes de dormir', 'Filtro de luz azul', 'Cansaço Visual', 'Vermelhidão nos olhos', 'Irritação nos olhos', 'Doença do olho seco']

for coluna in colunas_a_alterar:
    df[coluna] = df[coluna].replace({'Y': 'S'})

# Criando as colunas 'Sistólica' e 'Diastólica'
df[['Sistólica', 'Diastólica']] = df['Pressão Sanguínea'].str.split('/', expand=True)

# Convertendo as colunas para numéricas (tratando possíveis erros)
df['Sistólica'] = pd.to_numeric(df['Sistólica'], errors='coerce')
df['Diastólica'] = pd.to_numeric(df['Diastólica'], errors='coerce')

# Exibindo o DataFrame com as novas colunas
df.head()

# Calculando a média entre as colunas 'Sistólica' e 'Diastólica'
df['Média Pressão'] = (df['Sistólica'] + df['Diastólica']) / 2

# Exibindo o DataFrame com a nova coluna
df.head()

# Remove a coluna 'Pressão Sanguínea'
df = df.drop('Pressão Sanguínea', axis=1)

# Exibe o DataFrame atualizado
df.head()

"""#  Análise da Qualidade do Sono

Como o nível de estresse afeta a qualidade do sono?
"""

# Calculando a correlação entre nível de estresse e qualidade do sono
correlation = df['Nível de Estresse'].corr(df['Qualidade do Sono'])
print(f"Correlação entre Nível de Estresse e Qualidade do Sono: {correlation}")

"""Isso significa que não há relação linear significativa entre o nível de estresse e a qualidade do sono base de dados. Ou seja, mudanças na qualidade do sono não estão associadas a mudanças no nível de estresse (ou vice-versa) de forma linear.

⚠️ Mas atenção!

Isso não significa que não exista relação! Pode haver uma relação não-linear que Pearson não captura.
Pode ser que existam outras variáveis influenciando a relação (exemplo: saúde mental, medicação, hábitos diários).
"""

# Plotando a relação entre nível de estresse e qualidade do sono
plt.figure(figsize=(8, 6))
sns.boxplot(x='Nível de Estresse', y='Qualidade do Sono', data=df)
plt.title('Relação entre Nível de Estresse e Qualidade do Sono')
plt.xlabel('Nível de Estresse (1-Baixo a 5-Alto)')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(data=df, x="Qualidade do Sono", hue="Nível de Estresse", multiple="stack", bins=5)
plt.title('Distribuição da Qualidade do Sono por Nível de Estresse')
plt.xlabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.ylabel('Contagem')
plt.legend(title="Nível de Estresse")
plt.show()

"""Qual é a relação entre a duração do sono e sua qualidade autoavaliada?"""

# Calculando a correlação entre duração do sono e qualidade do sono
correlation = df['Duração do Sono'].corr(df['Qualidade do Sono'])
print(f"Correlação entre Duração do Sono e Qualidade do Sono: {correlation}")

"""O valor está muito próximo de zero, indicando que não há uma relação linear significativa entre a Duração do Sono e a Qualidade do Sono.
O sinal negativo sugere que um pequeno aumento na Duração do Sono pode estar associado a uma leve redução na Qualidade do Sono, mas essa relação é tão fraca que pode ser apenas ruído nos dados.

Possíveis Explicações
A relação pode ser não-linear

O coeficiente de Pearson só mede relações lineares. Se a relação for em formato de "U" ou curva, Pearson não captura bem essa informação.
Outros fatores podem influenciar

A qualidade do sono pode depender mais de hábitos diários, nível de estresse, distúrbios do sono e uso de dispositivos antes de dormir do que apenas da duração do sono.
Erros nos dados ou variabilidade individual

Se os dados contêm ruídos (exemplo: erros na medição da duração do sono ou autoavaliações subjetivas da qualidade do sono), isso pode impactar a correlação.
Algumas pessoas dormem muito, mas com baixa qualidade (exemplo: apneia do sono), enquanto outras dormem pouco, mas com alta qualidade.
"""

correlation_spearman = df['Duração do Sono'].corr(df['Qualidade do Sono'], method='spearman')
print(f"Correlação de Spearman: {correlation_spearman}")

df['Categoria Sono'] = pd.cut(df['Duração do Sono'], bins=[0, 4, 6, 8, 10, 12], labels=['Muito Curto', 'Curto', 'Ideal', 'Longo', 'Muito Longo'])
df.groupby('Categoria Sono')['Qualidade do Sono'].mean().plot(kind='bar')
plt.title("Média da Qualidade do Sono por Duração do Sono")
plt.ylabel("Qualidade do Sono")
plt.show()

plt.figure(figsize=(8,6))
plt.hexbin(df['Duração do Sono'], df['Qualidade do Sono'], gridsize=30, cmap='Blues', alpha=0.8)
plt.colorbar(label='Contagem')
plt.title('Densidade da Relação entre Duração do Sono e Qualidade do Sono')
plt.xlabel('Duração do Sono (horas)')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

"""O uso de dispositivos digitais antes de dormir impacta negativamente a qualidade do sono?"""

# Agrupar os dados por uso de dispositivo digital antes de dormir e calcular a média da qualidade do sono
sleep_quality_by_device_use = df.groupby('Dispositivo inteligente antes de dormir')['Qualidade do Sono'].mean()
print(sleep_quality_by_device_use)

# Calcular a correlação entre o uso de dispositivos digitais e a qualidade do sono
correlation = df['Dispositivo inteligente antes de dormir'].replace({'S':1,'N':0}).corr(df['Qualidade do Sono'])
print(f"Correlação entre Uso de Dispositivo Digital e Qualidade do Sono: {correlation}")

"""Esse valor está muito próximo de zero, o que indica que não há uma relação linear forte entre Uso de Dispositivo Digital Antes de Dormir e Qualidade do Sono.
O sinal negativo sugere que usar dispositivos digitais antes de dormir pode estar associado a uma ligeira piora na qualidade do sono, mas a relação é extremamente fraca, podendo ser apenas ruído nos dados.

Possíveis Explicações

1️⃣ A relação pode não ser linear

A correlação de Pearson mede apenas relações lineares. Se o impacto do uso de dispositivos digitais no sono for não-linear (por exemplo, apenas uso excessivo impacta o sono), Pearson pode não captar isso.

2️⃣ Outros fatores podem ter maior impacto

A qualidade do sono pode ser mais afetada por nível de estresse, cafeína, atividade física e distúrbios do sono do que pelo uso de telas.
O efeito da luz azul pode ser mitigado se a pessoa usar filtro de luz azul ou modo noturno.

3️⃣ Diferença no tipo de uso do dispositivo

O impacto pode depender do tipo de conteúdo consumido. Por exemplo, ler um livro digital pode ter um efeito diferente de jogar um jogo estimulante antes de dormir.

4️⃣ Ruído nos dados

Se os participantes não reportaram corretamente o tempo de uso ou sua qualidade do sono for subjetiva, isso pode reduzir a correlação observada.
"""

# Criar um gráfico de barras para visualizar a diferença
plt.figure(figsize=(6, 4))
sns.barplot(x=sleep_quality_by_device_use.index, y=sleep_quality_by_device_use.values)
plt.title('Qualidade do Sono vs. Uso de Dispositivo Digital Antes de Dormir')
plt.xlabel('Uso de Dispositivo Digital Antes de Dormir (S/N)')
plt.ylabel('Qualidade do Sono Média')
plt.show()

plt.figure(figsize=(6, 4))
sns.boxplot(x='Dispositivo inteligente antes de dormir', y='Qualidade do Sono', data=df)
plt.title('Distribuição da Qualidade do Sono vs. Uso de Dispositivo Digital')
plt.xlabel('Uso de Dispositivo Digital Antes de Dormir (S/N)')
plt.ylabel('Qualidade do Sono')
plt.show()

"""A prática de atividade física influencia positivamente a qualidade do sono?"""

# Calculando a correlação entre atividade física e qualidade do sono
correlation = df['Atividade Fisica'].corr(df['Qualidade do Sono'])
print(f"Correlação entre Atividade Física e Qualidade do Sono: {correlation}")

"""Esse valor está muito próximo de zero, indicando que não há uma relação linear forte entre Atividade Física e Qualidade do Sono.
O sinal negativo sugere uma leve tendência de que mais atividade física esteja associada a uma menor qualidade do sono, mas a relação é extremamente fraca e pode ser insignificante.
"""

df['Faixa_Atividade'] = pd.qcut(df['Atividade Fisica'], q=3, labels=["Baixa", "Moderada", "Alta"])
df_grouped = df.groupby('Faixa_Atividade')['Qualidade do Sono'].mean()

df_grouped.plot(kind='bar', color=['blue', 'green', 'red'])
plt.title("Qualidade do Sono por Nível de Atividade Física")
plt.xlabel("Nível de Atividade Física")
plt.ylabel("Média da Qualidade do Sono")
plt.xticks(rotation=0)  # Mantém os rótulos horizontais
plt.show()

plt.figure(figsize=(8, 6))
sns.kdeplot(x='Atividade Fisica', y='Qualidade do Sono', data=df, fill=True, cmap='Blues', thresh=0.05)
plt.title('Densidade da Relação entre Atividade Física e Qualidade do Sono')
plt.xlabel('Atividade Física')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

plt.figure(figsize=(8,6))
plt.hexbin(df['Atividade Fisica'], df['Qualidade do Sono'], gridsize=30, cmap='Blues', alpha=0.8)
plt.colorbar(label='Contagem')
plt.title('Densidade da Relação entre Atividade Física e Qualidade do Sono')
plt.xlabel('Atividade Física')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

"""Existe alguma relação entre pressão arterial e qualidade do sono?"""

# Calculando a correlação entre pressão arterial média e qualidade do sono
correlation = df['Média Pressão'].corr(df['Qualidade do Sono'])
print(f"Correlação entre Pressão Arterial Média e Qualidade do Sono: {correlation}")

"""Isso indica que a qualidade do sono de um indivíduo não varia de forma consistente com sua pressão arterial média.
Ou seja, pessoas com qualidade do sono alta ou baixa podem ter pressões arteriais similares.

Esse resultado sugere que, dentro desse conjunto de dados, a Pressão Arterial Média não é um fator determinante para a Qualidade do Sono.
No entanto, isso não significa que não haja uma relação indireta.
Por exemplo, fatores como estresse, estilo de vida e doenças cardiovasculares podem influenciar tanto a pressão arterial quanto o sono, mas não de forma diretamente linear.
"""

plt.figure(figsize=(8,6))
sns.kdeplot(x='Média Pressão', y='Qualidade do Sono', data=df, fill=True, cmap='Blues', thresh=0.05)
plt.title('Densidade da Relação entre Pressão Arterial Média e Qualidade do Sono')
plt.xlabel('Pressão Arterial Média (mmHg)')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

plt.figure(figsize=(8,6))
sns.boxplot(x=pd.cut(df['Média Pressão'], bins=4), y='Qualidade do Sono', data=df)
plt.title('Qualidade do Sono por Faixas de Pressão Arterial Média')
plt.xlabel('Faixas de Pressão Arterial Média (mmHg)')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

plt.figure(figsize=(8,6))
plt.hexbin(df['Média Pressão'], df['Qualidade do Sono'], gridsize=30, cmap='Blues', alpha=0.8)
plt.colorbar(label='Contagem')
plt.title('Densidade da Relação entre Pressão Arterial Média e Qualidade do Sono')
plt.xlabel('Pressão Arterial Média (mmHg)')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

"""---

# Impacto do Estilo de Vida na Saúde

Indivíduos que fumam apresentam pior qualidade de sono em comparação com não fumantes?
"""

# Agrupar os dados por hábito de fumar e calcular a média da qualidade do sono
sleep_quality_by_smoking = df.groupby('Fumante')['Qualidade do Sono'].mean()
print(sleep_quality_by_smoking)

# Criar um gráfico de barras para visualizar a diferença
plt.figure(figsize=(6, 4))
sns.barplot(x=sleep_quality_by_smoking.index, y=sleep_quality_by_smoking.values)
plt.title('Qualidade do Sono vs. Hábito de Fumar')
plt.xlabel('Fumante (S/N)')
plt.ylabel('Qualidade do Sono Média')
plt.show()

#Teste estatístico (t-test) para comparar as médias
from scipy.stats import ttest_ind

fumantes = df[df['Fumante'] == 'S']['Qualidade do Sono']
nao_fumantes = df[df['Fumante'] == 'N']['Qualidade do Sono']

t_statistic, p_value = ttest_ind(fumantes, nao_fumantes)

print(f"T-statistic: {t_statistic}")
print(f"P-value: {p_value}")

#Interpretação do p-value:
if p_value < 0.05:
    print("Existe uma diferença significativa na qualidade do sono entre fumantes e não fumantes.")
else:
    print("Não há evidências suficientes para concluir que existe uma diferença significativa na qualidade do sono entre fumantes e não fumantes.")

#Boxplot para visualizar a distribuição da qualidade do sono entre fumantes e não fumantes
plt.figure(figsize=(6, 4))
sns.boxplot(x='Fumante', y='Qualidade do Sono', data=df)
plt.title('Qualidade do Sono vs. Hábito de Fumar')
plt.xlabel('Fumante (S/N)')
plt.ylabel('Qualidade do Sono')
plt.show()

"""Pessoas com condições médicas preexistentes relatam maior nível de estresse?"""

# Agrupar os dados por condição médica preexistente e calcular a média do nível de estresse
stress_by_medical_condition = df.groupby('Problema médico')['Nível de Estresse'].mean()
print(stress_by_medical_condition)

# Criar um gráfico de barras para visualizar a diferença
plt.figure(figsize=(6, 4))
sns.barplot(x=stress_by_medical_condition.index, y=stress_by_medical_condition.values)
plt.title('Nível de Estresse vs. Condição Médica Preexistente')
plt.xlabel('Condição Médica Preexistente (S/N)')
plt.ylabel('Nível de Estresse Médio')
plt.show()

# Teste estatístico (t-test) para comparar as médias
com_condicoes = df[df['Problema médico'] == 'S']['Nível de Estresse']
sem_condicoes = df[df['Problema médico'] == 'N']['Nível de Estresse']

t_statistic, p_value = ttest_ind(com_condicoes, sem_condicoes)

print(f"T-statistic: {t_statistic}")
print(f"P-value: {p_value}")

# Interpretação do p-value:
if p_value < 0.05:
    print("Existe uma diferença significativa no nível de estresse entre pessoas com e sem condições médicas preexistentes.")
else:
    print("Não há evidências suficientes para concluir que existe uma diferença significativa no nível de estresse entre pessoas com e sem condições médicas preexistentes.")

# Boxplot para visualizar a distribuição do nível de estresse entre os grupos
plt.figure(figsize=(6, 4))
sns.boxplot(x='Problema médico', y='Nível de Estresse', data=df)
plt.title('Nível de Estresse vs. Condição Médica Preexistente')
plt.xlabel('Condição Médica Preexistente (S/N)')
plt.ylabel('Nível de Estresse')
plt.show()

"""O uso de medicamentos contínuos está associado a uma menor duração do sono?"""

# Agrupar os dados por uso de medicação contínua e calcular a média da duração do sono
sleep_duration_by_medication = df.groupby('Medicação em andamento')['Duração do Sono'].mean()
print(sleep_duration_by_medication)

# Criar um gráfico de barras para visualizar a diferença
plt.figure(figsize=(6, 4))
sns.barplot(x=sleep_duration_by_medication.index, y=sleep_duration_by_medication.values)
plt.title('Duração do Sono vs. Medicação Contínua')
plt.xlabel('Medicação em andamento (S/N)')
plt.ylabel('Duração do Sono Média')
plt.show()

# Teste estatístico (t-test) para comparar as médias
com_medicacao = df[df['Medicação em andamento'] == 'S']['Duração do Sono']
sem_medicacao = df[df['Medicação em andamento'] == 'N']['Duração do Sono']

t_statistic, p_value = ttest_ind(com_medicacao, sem_medicacao)

print(f"T-statistic: {t_statistic}")
print(f"P-value: {p_value}")

# Interpretação do p-value:
if p_value < 0.05:
    print("Existe uma diferença significativa na duração do sono entre indivíduos que usam e não usam medicação contínua.")
else:
    print("Não há evidências suficientes para concluir que existe uma diferença significativa na duração do sono entre indivíduos que usam e não usam medicação contínua.")

# Boxplot para visualizar a distribuição da duração do sono entre os grupos
plt.figure(figsize=(6, 4))
sns.boxplot(x='Medicação em andamento', y='Duração do Sono', data=df)
plt.title('Duração do Sono vs. Medicação Contínua')
plt.xlabel('Medicação em andamento (S/N)')
plt.ylabel('Duração do Sono')
plt.show()

"""Como o número médio de passos diários se correlaciona com a qualidade do sono e os níveis de estresse?"""

# Calculando a correlação entre passos diários e qualidade do sono
correlation_steps_sleep = df['Passos Diários'].corr(df['Qualidade do Sono'])
print(f"Correlação entre Passos Diários e Qualidade do Sono: {correlation_steps_sleep}")

# Calculando a correlação entre passos diários e nível de estresse
correlation_steps_stress = df['Passos Diários'].corr(df['Nível de Estresse'])
print(f"Correlação entre Passos Diários e Nível de Estresse: {correlation_steps_stress}")

plt.figure(figsize=(8,6))
sns.boxplot(x=pd.cut(df['Passos Diários'], bins=5), y='Qualidade do Sono', data=df)
plt.title('Qualidade do Sono por Faixas de Passos Diários')
plt.xlabel('Faixas de Passos Diários')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

plt.figure(figsize=(8,6))
sns.kdeplot(x='Passos Diários', y='Qualidade do Sono', data=df, fill=True, cmap='Blues', thresh=0.05)
plt.title('Densidade da Relação entre Passos Diários e Qualidade do Sono')
plt.xlabel('Passos Diários')
plt.ylabel('Qualidade do Sono')
plt.show()

plt.figure(figsize=(8,6))
plt.hexbin(df['Passos Diários'], df['Qualidade do Sono'], gridsize=30, cmap='Blues', alpha=0.8)
plt.colorbar(label='Contagem')
plt.title('Densidade da Relação entre Passos Diários e Qualidade do Sono')
plt.xlabel('Passos Diários')
plt.ylabel('Qualidade do Sono')
plt.show()

#Plotando a relação entre passos diários e qualidade do sono com a distribuição
plt.figure(figsize=(8,6))
sns.kdeplot(x='Passos Diários', y='Qualidade do Sono', data=df, fill=True, cmap='Blues', thresh=0.05)
plt.title('Densidade da Relação entre Passos Diários e Qualidade do Sono')
plt.xlabel('Passos Diários')
plt.ylabel('Qualidade do Sono (1-Pobre a 5-Excelente)')
plt.show()

#Plotando a relação entre passos diários e nível de estresse com a distribuição
plt.figure(figsize=(8,6))
sns.kdeplot(x='Passos Diários', y='Nível de Estresse', data=df, fill=True, cmap='Blues', thresh=0.05)
plt.title('Densidade da Relação entre Passos Diários e Nível de Estresse')
plt.xlabel('Passos Diários')
plt.ylabel('Nível de Estresse (1-Baixo a 5-Alto)')
plt.show()

"""---

# Exposição a Telas e Saúde Ocular

O tempo médio de exposição a telas está associado a maior incidência de irritação ocular?
"""

# Calcular a correlação entre tempo médio de tela e irritação ocular
correlation = df['Tempo médio de tela'].corr(df['Irritação nos olhos'].replace({'S': 1, 'N': 0}))
print(f"Correlação entre Tempo Médio de Tela e Irritação nos Olhos: {correlation}")

df['Irritação nos olhos'] = df['Irritação nos olhos'].map({'S': 1, 'N': 0})
df['Irritação nos olhos']

# Agrupar os dados por tempo médio de tela e calcular a média da irritação ocular
irritation_by_screen_time = df.groupby(pd.cut(df['Tempo médio de tela'], bins=5))['Irritação nos olhos'].mean()

# Criar um gráfico de barras para visualizar a associação
plt.figure(figsize=(10, 6))
sns.barplot(x=irritation_by_screen_time.index, y=irritation_by_screen_time.values)
plt.title('Irritação nos Olhos vs. Tempo Médio de Tela')
plt.xlabel('Tempo Médio de Tela (horas)')
plt.ylabel('Média de Irritação nos Olhos')
plt.xticks(rotation=45, ha='right')  # Rotacionar os rótulos do eixo x para melhor legibilidade
plt.show()

# Criar um boxplot para visualizar a relação
plt.figure(figsize=(8, 6))
sns.boxplot(x=df['Irritação nos olhos'], y=df['Tempo médio de tela'])
plt.title('Distribuição do Tempo de Tela por Irritação nos Olhos')
plt.xlabel('Irritação nos Olhos (0=Não, 1=Sim)')
plt.ylabel('Tempo Médio de Tela (horas)')
plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(df, x='Tempo médio de tela', hue='Irritação nos olhos', kde=True, bins=20, alpha=0.5)
plt.title('Distribuição do Tempo de Tela por Irritação nos Olhos')
plt.xlabel('Tempo Médio de Tela (horas)')
plt.ylabel('Contagem')
plt.show()

"""O uso de filtro de luz azul reduz sintomas de olho seco ou desconforto ocular?"""

# Agrupar os dados por uso de filtro de luz azul e calcular a média dos sintomas oculares
sintomas = ['Cansaço Visual', 'Vermelhidão nos olhos', 'Irritação nos olhos', 'Doença do olho seco']
for sintoma in sintomas:
    sintoma_por_filtro = df.groupby('Filtro de luz azul')[sintoma].value_counts(normalize=True).unstack()
    print(f"\nProporção de {sintoma} por uso de filtro de luz azul:")
    print(sintoma_por_filtro)

# Visualizar a distribuição dos sintomas com e sem filtro de luz azul
plt.figure(figsize=(8, 6))
sintoma_por_filtro.plot(kind='bar', stacked=True)
plt.title(f'Distribuição de {sintoma} pelo uso de Filtro de Luz Azul')
plt.xlabel('Filtro de Luz Azul (S/N)')
plt.ylabel('Proporção')
plt.xticks(rotation=0)
plt.show()

#Teste qui-quadrado para verificar associação entre filtro de luz azul e cada sintoma
from scipy.stats import chi2_contingency

contingency_table = pd.crosstab(df['Filtro de luz azul'], df[sintoma])
chi2, p, dof, expected = chi2_contingency(contingency_table)

print(f"\nTeste Qui-quadrado para {sintoma}:")
print(f"Qui-quadrado: {chi2}")
print(f"P-valor: {p}")

if p < 0.05:
   print(f"Existe uma associação estatisticamente significativa entre o uso de filtro de luz azul e a presença de {sintoma}.")
else:
   print(f"Não há evidências suficientes para indicar uma associação estatisticamente significativa entre o uso de filtro de luz azul e a presença de {sintoma}.")

"""Existe uma relação entre estresse elevado e maior tempo de tela?"""

# Calcular a correlação entre nível de estresse e tempo médio de tela
correlation_stress_screen = df['Nível de Estresse'].corr(df['Tempo médio de tela'])
print(f"Correlação entre Nível de Estresse e Tempo Médio de Tela: {correlation_stress_screen}")

plt.figure(figsize=(8, 6))
sns.boxplot(x='Nível de Estresse', y='Tempo médio de tela', data=df)
plt.title('Distribuição do Tempo Médio de Tela por Nível de Estresse')
plt.xlabel('Nível de Estresse (1-Baixo a 5-Alto)')
plt.ylabel('Tempo Médio de Tela (horas)')
plt.show()

plt.figure(figsize=(8, 6))
sns.barplot(x='Nível de Estresse', y='Tempo médio de tela', data=df, ci="sd")
plt.title('Média do Tempo Médio de Tela por Nível de Estresse')
plt.xlabel('Nível de Estresse (1-Baixo a 5-Alto)')
plt.ylabel('Tempo Médio de Tela (horas)')
plt.show()

# Criar um gráfico de KDE para visualizar a relação com a densidade
plt.figure(figsize=(8,6))
sns.kdeplot(x='Tempo médio de tela', y='Nível de Estresse', data=df, fill=True, cmap='Blues', thresh=0.05)
plt.title('Densidade da Relação entre Tempo Médio de Tela e Nível de Estresse')
plt.xlabel('Tempo Médio de Tela')
plt.ylabel('Nível de Estresse (1-Baixo a 5-Alto)')
plt.show()

"""O uso de dispositivos antes de dormir aumenta a probabilidade de apresentar vermelhidão nos olhos?"""

# Agrupar os dados por uso de dispositivo antes de dormir e calcular a frequência de vermelhidão nos olhos
vermelhidao_por_dispositivo = df.groupby('Dispositivo inteligente antes de dormir')['Vermelhidão nos olhos'].value_counts(normalize=True).unstack()

print(f"\nProporção de Vermelhidão nos olhos por uso de dispositivo antes de dormir:")
print(vermelhidao_por_dispositivo)

# Visualizar a distribuição da vermelhidão nos olhos com e sem uso de dispositivo antes de dormir
plt.figure(figsize=(8, 6))
vermelhidao_por_dispositivo.plot(kind='bar', stacked=True)
plt.title('Distribuição de Vermelhidão nos Olhos pelo uso de Dispositivo antes de Dormir')
plt.xlabel('Uso de Dispositivo antes de Dormir (S/N)')
plt.ylabel('Proporção')
plt.xticks(rotation=0)
plt.show()

# Teste qui-quadrado para verificar associação entre uso de dispositivo antes de dormir e vermelhidão nos olhos
contingency_table = pd.crosstab(df['Dispositivo inteligente antes de dormir'], df['Vermelhidão nos olhos'])
chi2, p, dof, expected = chi2_contingency(contingency_table)

print(f"\nTeste Qui-quadrado para Vermelhidão nos Olhos:")
print(f"Qui-quadrado: {chi2}")
print(f"P-valor: {p}")

if p < 0.05:
    print(f"Existe uma associação estatisticamente significativa entre o uso de dispositivo antes de dormir e a presença de vermelhidão nos olhos.")
else:
    print(f"Não há evidências suficientes para indicar uma associação estatisticamente significativa entre o uso de dispositivo antes de dormir e a presença de vermelhidão nos olhos.")

""" Indivíduos com mais horas de tela diária apresentam maior incidência de olho seco?"""

# Agrupar os dados por faixas de tempo de tela e calcular a proporção de indivíduos com olho seco em cada faixa
dry_eye_by_screen_time = df.groupby(pd.cut(df['Tempo médio de tela'], bins=5))['Doença do olho seco'].value_counts(normalize=True).unstack()

print(f"\nProporção de Doença do olho seco por tempo médio de tela:")
print(dry_eye_by_screen_time)

# Criar um gráfico de barras para visualizar a associação
plt.figure(figsize=(10, 6))
dry_eye_by_screen_time.plot(kind='bar', stacked=True)
plt.title('Doença do Olho Seco vs. Tempo Médio de Tela')
plt.xlabel('Tempo Médio de Tela (horas)')
plt.ylabel('Proporção')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Doença do olho seco')
plt.show()

# Calcular a correlação entre tempo médio de tela e olho seco
correlation = df['Tempo médio de tela'].corr(df['Doença do olho seco'].replace({'S': 1, 'N': 0}))
print(f"Correlação entre Tempo Médio de Tela e Doença do Olho Seco: {correlation}")

# Teste qui-quadrado para verificar associação entre tempo de tela e olho seco
contingency_table = pd.crosstab(pd.cut(df['Tempo médio de tela'], bins=5), df['Doença do olho seco'])
chi2, p, dof, expected = chi2_contingency(contingency_table)

print(f"\nTeste Qui-quadrado para Doença do Olho Seco:")
print(f"Qui-quadrado: {chi2}")
print(f"P-valor: {p}")

if p < 0.05:
    print(f"Existe uma associação estatisticamente significativa entre o tempo médio de tela e a presença de doença do olho seco.")
else:
    print(f"Não há evidências suficientes para indicar uma associação estatisticamente significativa entre o tempo médio de tela e a presença de doença do olho seco.")

"""---

# Modelagem Preditiva e Insights de Saúde

Quais fatores são mais relevantes para prever a qualidade do sono?
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np

# Prepare the data for modeling
features = ['Atividade Fisica', 'Média Pressão', 'Fumante', 'Problema médico',
            'Medicação em andamento', 'Passos Diários', 'Tempo médio de tela',
            'Nível de Estresse', 'Dispositivo inteligente antes de dormir',
            'Irritação nos olhos', 'Cansaço Visual', 'Vermelhidão nos olhos',
            'Doença do olho seco']  # Include all relevant features
features_transformed = df_encoded.filter(regex='Atividade Fisica|Média Pressão|Fumante|Problema médico|'
                                                  'Medicação em andamento|Passos Diários|Tempo médio de tela|'
                                                  'Nível de Estresse|Dispositivo inteligente antes de dormir|'
                                                  'Irritação nos olhos|Cansaço Visual|Vermelhidão nos olhos|'
                                                  'Doença do olho seco').columns

# Selecionar as features no DataFrame
X = df_encoded[features_transformed]

# Definir a variável alvo
y = df_encoded['Qualidade do Sono']

# Handle missing values (if any) – you might need to adjust this based on your data
X = X.fillna(X.mean()) # or other imputation method


# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a RandomForestRegressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Get feature importances
feature_importances = model.feature_importances_

# Create a DataFrame to display feature importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)
print("\nFeature Importances:")
feature_importance_df

"""---

É possível prever o nível de estresse de um indivíduo com base no estilo de vida e hábitos de sono?
"""

df.columns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Converter variáveis categóricas (como 'Fumante', 'Medicação em andamento') para variáveis binárias (0 ou 1)
df['Fumante'] = df['Fumante'].map({'S': 1, 'N': 0})
df['Medicação em andamento'] = df['Medicação em andamento'].map({'S': 1, 'N': 0})
df['Gênero'] = df['Gênero'].map({'M': 0, 'F': 1})
df['Disturbio do Sono'] = df['Disturbio do Sono'].map({'S': 1, 'N': 0})
df['Acordar durante a noite'] = df['Acordar durante a noite'].map({'S': 1, 'N': 0})
df['Sentir sono durante o dia'] = df['Sentir sono durante o dia'].map({'S': 1, 'N': 0})
df['Problema médico'] = df['Problema médico'].map({'S': 1, 'N': 0})
df['Dispositivo inteligente antes de dormir'] = df['Dispositivo inteligente antes de dormir'].map({'S': 1, 'N': 0})
df['Filtro de luz azul'] = df['Filtro de luz azul'].map({'S': 1, 'N': 0})
df['Consumo de cafeína'] = df['Consumo de cafeína'].map({'S': 1, 'N': 0})
df['Consumo de álcool'] = df['Consumo de álcool'].map({'S': 1, 'N': 0})
df['Cansaço Visual'] = df['Cansaço Visual'].map({'S': 1, 'N': 0})
df['Vermelhidão nos olhos'] = df['Vermelhidão nos olhos'].map({'S': 1, 'N': 0})
df['Irritação nos olhos'] = df['Irritação nos olhos'].map({'S': 1, 'N': 0})
df['Doença do olho seco'] = df['Doença do olho seco'].map({'S': 1, 'N': 0})

# Dividir os dados em variáveis independentes (X) e dependentes (y)
X = df.drop(columns=['Nível de Estresse'])  # Todas as colunas, exceto o nível de estresse
y = df['Nível de Estresse']  # Variável alvo

# Dividir em dados de treinamento (80%) e teste (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Configurar o Pandas para exibir todas as colunas
pd.set_option('display.max_columns', None)

# Exibir as primeiras linhas do DataFrame
print(df.head())

# Normalizar os dados usando StandardScaler
scaler = StandardScaler()

# Ajustar o scaler aos dados de treino e transformá-los
X_train_scaled = scaler.fit_transform(X_train)

# Transformar os dados de teste com o scaler já ajustado
X_test_scaled = scaler.transform(X_test)

# Instanciar e treinar o modelo
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Fazer previsões nos dados de teste
y_pred = model.predict(X_test_scaled)

# Avaliar o desempenho do modelo
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Exibir as métricas de avaliação
print(f'MAE (Erro Absoluto Médio): {mae}')
print(f'MSE (Erro Quadrático Médio): {mse}')
print(f'RMSE (Raiz do Erro Quadrático Médio): {rmse}')
print(f'R2 (Coeficiente de Determinação): {r2}')

# Plotar a comparação entre valores reais e previstos
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linewidth=2)
plt.xlabel('Valor Real de Estresse')
plt.ylabel('Valor Previsto de Estresse')
plt.title('Comparação entre Real e Previsto')
plt.show()

"""

---

"""